// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: executor.proto

#include "executor.pb.h"
#include "executor.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace executor {

static const char* IExecEngine_method_names[] = {
  "/executor.IExecEngine/run",
  "/executor.IExecEngine/allocate",
  "/executor.IExecEngine/deallocate",
};

std::unique_ptr< IExecEngine::Stub> IExecEngine::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< IExecEngine::Stub> stub(new IExecEngine::Stub(channel));
  return stub;
}

IExecEngine::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_run_(IExecEngine_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_allocate_(IExecEngine_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deallocate_(IExecEngine_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IExecEngine::Stub::run(::grpc::ClientContext* context, const ::executor::RunRequest& request, ::executor::RunResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_run_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::executor::RunResponse>* IExecEngine::Stub::AsyncrunRaw(::grpc::ClientContext* context, const ::executor::RunRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::executor::RunResponse>(channel_.get(), cq, rpcmethod_run_, context, request);
}

::grpc::Status IExecEngine::Stub::allocate(::grpc::ClientContext* context, const ::executor::AllocRequest& request, ::executor::AllocResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_allocate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::executor::AllocResponse>* IExecEngine::Stub::AsyncallocateRaw(::grpc::ClientContext* context, const ::executor::AllocRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::executor::AllocResponse>(channel_.get(), cq, rpcmethod_allocate_, context, request);
}

::grpc::Status IExecEngine::Stub::deallocate(::grpc::ClientContext* context, const ::executor::DeallocRequest& request, ::executor::DeallocResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_deallocate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::executor::DeallocResponse>* IExecEngine::Stub::AsyncdeallocateRaw(::grpc::ClientContext* context, const ::executor::DeallocRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::executor::DeallocResponse>(channel_.get(), cq, rpcmethod_deallocate_, context, request);
}

IExecEngine::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      IExecEngine_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< IExecEngine::Service, ::executor::RunRequest, ::executor::RunResponse>(
          std::mem_fn(&IExecEngine::Service::run), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      IExecEngine_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< IExecEngine::Service, ::executor::AllocRequest, ::executor::AllocResponse>(
          std::mem_fn(&IExecEngine::Service::allocate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      IExecEngine_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< IExecEngine::Service, ::executor::DeallocRequest, ::executor::DeallocResponse>(
          std::mem_fn(&IExecEngine::Service::deallocate), this)));
}

IExecEngine::Service::~Service() {
}

::grpc::Status IExecEngine::Service::run(::grpc::ServerContext* context, const ::executor::RunRequest* request, ::executor::RunResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IExecEngine::Service::allocate(::grpc::ServerContext* context, const ::executor::AllocRequest* request, ::executor::AllocResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IExecEngine::Service::deallocate(::grpc::ServerContext* context, const ::executor::DeallocRequest* request, ::executor::DeallocResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace executor

